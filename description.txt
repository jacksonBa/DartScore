DartScore design concept and description
----------------------------------------

Basics:
In this version everything is run on a raspberry pi 3
The pi has a cam
There are some buttons, a switch and some leds connected to the pi

Design:
DartScore is coded like a game-loop.
All items in the project (allmost) has at least 3 public methods: initialize, update, draw.
These are called for all objects in the project in a certain sequence.
There are two main parts. This project (DartScore) and a mjpg streame to create a video-stream.
The Videostream can be viewed in any webbrowser on the same network, like a netcam.
The streamer is started from the Vision class but must installed and configured correctly.
For the moment there is no actually gui since all information is written to the videostream



Root-directory:
--------------
Main:
The start for the project. Only used to start and run the loop and to catch general exceptions.

MainLoop:
The mainloop for the project. Implements methods for initialize, update and draw and decides the order of the other items.

DartScoreConfig.py:
A dictionary with all kinds of settings to separate commonly used parameters from the code.
Each module has its own sub config-dictionary

Some testscripts, helpfiles and pictures...

Modules/directories:
---------------------
There are alot of modules and classes to separate things and get a design that is easy to modify.
The aim is that each class has a "if __name__ == "__main__":" statement and should be possible to 'unit-test'


Actuators:
Classes for indication-leds

Board:
Calibration and setup of board

Inputs:
Handles buttons and switches

Logger:
To log... Not used yet

Recorder:
Record the videostream

StateLoops:
Handles different states in the game

Utils:
Some opencv help methods

Videos:
Only a directory for storing recordings etc

Vision:
All things for the cam, streamer etc
